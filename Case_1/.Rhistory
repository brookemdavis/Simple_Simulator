# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort[y,]<-Cohort[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort[y,] * matRate
# Now remove these from population
Cohort[y,] <- Cohort[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
}
# Sum escapement over all ages
Escape.Tot<-rowSums(Escape, na.rm=T)
# Plot escapement timeseries, with the first 5 years of observations shown in red
par(mfrow=c(1,1))
Escape.Plot<-c(S2011,S2012,S2013,S2014,S2015,Escape.Tot[6:nYears])
Years.Plot<-2011:(2011+nYears-1)
plot(Years.Plot,Escape.Plot)
points(2011:2015, Escape.Plot[1:5], col="red", pch=19)
browser()
# Plot cohort time series
par(mfrow=c(2,3))
for (a in 1:5) {
plot(Years.Plot[6:nYears],Cohort[6:nYears,a])
title(main=paste("Age",a, sep=""))
}
browser()
}
Catch_PT[5,]
for (y in 1:nYears) {
# Note: Need to think about order of overwinter survival and recruitment; does survival age 1 mean survival from age 1 to age 2????
# Apply overwinter survival and advance age forward a year
if (y > 1) {
for (a in 2:nAges) {
Cohort[y,a] <- Cohort[y-1, a-1] * survRate[a-1]
}
}
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
if (y==3)  Cohort [y,1]<-Get.Age1.Recruits(S=S2013, a = alpha, b = beta)
if (y==4)  Cohort [y,1]<-Get.Age1.Recruits(S=S2014, a = alpha, b = beta)
if (y==5)  Cohort [y,1]<-Get.Age1.Recruits(S=S2015, a = alpha, b = beta)
if (y > 5)  Cohort[y,1]<-Get.Age1.Recruits(S=sum(Escape[y-1,],na.rm=T), a = alpha, b = beta)
# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort[y,]<-Cohort[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort[y,] * matRate
# Now remove these from population
Cohort[y,] <- Cohort[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
}
# Sum escapement over all ages
Escape.Tot<-rowSums(Escape, na.rm=T)
# Plot escapement timeseries, with the first 5 years of observations shown in red
par(mfrow=c(1,1))
Escape.Plot<-c(S2011,S2012,S2013,S2014,S2015,Escape.Tot[6:nYears])
Years.Plot<-2011:(2011+nYears-1)
plot(Years.Plot,Escape.Plot)
points(2011:2015, Escape.Plot[1:5], col="red", pch=19)
#browser()
# Plot cohort time series
par(mfrow=c(2,3))
for (a in 1:5) {
plot(Years.Plot[6:nYears],Cohort[6:nYears,a])
title(main=paste("Age",a, sep=""))
}
#browser()
}
yy
yy
y
Catch_PT[5,]
PT_ER
Cohort
NAges
nAges
survRate[a-1]
a
a<-5
survRate[a-1]
survRate
S2015
y<-5
a<5
a<-5
Cohort[y-1, a-1] * survRate[a-1]
for (y in 1:nYears) {
# Note: Need to think about order of overwinter survival and recruitment; does survival age 1 mean survival from age 1 to age 2????
# Apply overwinter survival and advance age forward a year
if (y > 1) {
for (a in 2:nAges) {
Cohort[y,a] <- Cohort_After_Mature[y-1, a-1] * survRate[a]
}
}
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
if (y==3)  Cohort [y,1]<-Get.Age1.Recruits(S=S2013, a = alpha, b = beta)
if (y==4)  Cohort [y,1]<-Get.Age1.Recruits(S=S2014, a = alpha, b = beta)
if (y==5)  Cohort [y,1]<-Get.Age1.Recruits(S=S2015, a = alpha, b = beta)
if (y > 5)  Cohort[y,1]<-Get.Age1.Recruits(S=sum(Escape[y-1,],na.rm=T), a = alpha, b = beta)
# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort[y,]<- Cohort_After_PT[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort_After_PT[y,] * matRate
# Now remove these from population
Cohort_After_Mature[y,] <- Cohort_After_PT[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
}
# Sum escapement over all ages
Escape.Tot<-rowSums(Escape, na.rm=T)
# Plot escapement timeseries, with the first 5 years of observations shown in red
par(mfrow=c(1,1))
Escape.Plot<-c(S2011,S2012,S2013,S2014,S2015,Escape.Tot[6:nYears])
Years.Plot<-2011:(2011+nYears-1)
plot(Years.Plot,Escape.Plot)
points(2011:2015, Escape.Plot[1:5], col="red", pch=19)
#browser()
# Plot cohort time series
par(mfrow=c(2,3))
for (a in 1:5) {
plot(Years.Plot[6:nYears],Cohort[6:nYears,a])
title(main=paste("Age",a, sep=""))
}
#browser()
}
for (y in 1:nYears) {
# Note: Need to think about order of overwinter survival and recruitment; does survival age 1 mean survival from age 1 to age 2????
# Apply overwinter survival and advance age forward a year
if (y > 1) {
for (a in 2:nAges) {
Cohort[y,a] <- Cohort_After_Mature[y-1, a-1] * survRate[a]
}
}
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
if (y==3)  Cohort [y,1]<-Get.Age1.Recruits(S=S2013, a = alpha, b = beta)
if (y==4)  Cohort [y,1]<-Get.Age1.Recruits(S=S2014, a = alpha, b = beta)
if (y==5)  Cohort [y,1]<-Get.Age1.Recruits(S=S2015, a = alpha, b = beta)
if (y > 5)  Cohort[y,1]<-Get.Age1.Recruits(S=sum(Escape[y-1,],na.rm=T), a = alpha, b = beta)
# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort[y,]<- Cohort_After_PT[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort_After_PT[y,] * matRate
# Now remove these from population
Cohort_After_Mature[y,] <- Cohort_After_PT[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
} # end year loop
Cohort_After_Mature <- array(dim=c(nYears, nAges))
for (y in 1:nYears) {
# Note: Need to think about order of overwinter survival and recruitment; does survival age 1 mean survival from age 1 to age 2????
# Apply overwinter survival and advance age forward a year
if (y > 1) {
for (a in 2:nAges) {
Cohort[y,a] <- Cohort_After_Mature[y-1, a-1] * survRate[a]
}
}
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
if (y==3)  Cohort [y,1]<-Get.Age1.Recruits(S=S2013, a = alpha, b = beta)
if (y==4)  Cohort [y,1]<-Get.Age1.Recruits(S=S2014, a = alpha, b = beta)
if (y==5)  Cohort [y,1]<-Get.Age1.Recruits(S=S2015, a = alpha, b = beta)
if (y > 5)  Cohort[y,1]<-Get.Age1.Recruits(S=sum(Escape[y-1,],na.rm=T), a = alpha, b = beta)
# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort[y,]<- Cohort_After_PT[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort_After_PT[y,] * matRate
# Now remove these from population
Cohort_After_Mature[y,] <- Cohort_After_PT[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
} # end year loop
Cohort_After_PT <- array(dim=c(nYears, nAges))
for (y in 1:nYears) {
# Note: Need to think about order of overwinter survival and recruitment; does survival age 1 mean survival from age 1 to age 2????
# Apply overwinter survival and advance age forward a year
if (y > 1) {
for (a in 2:nAges) {
Cohort[y,a] <- Cohort_After_Mature[y-1, a-1] * survRate[a]
}
}
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
if (y==3)  Cohort [y,1]<-Get.Age1.Recruits(S=S2013, a = alpha, b = beta)
if (y==4)  Cohort [y,1]<-Get.Age1.Recruits(S=S2014, a = alpha, b = beta)
if (y==5)  Cohort [y,1]<-Get.Age1.Recruits(S=S2015, a = alpha, b = beta)
if (y > 5)  Cohort[y,1]<-Get.Age1.Recruits(S=sum(Escape[y-1,],na.rm=T), a = alpha, b = beta)
# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort[y,]<- Cohort_After_PT[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort_After_PT[y,] * matRate
# Now remove these from population
Cohort_After_Mature[y,] <- Cohort_After_PT[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
} # end year loop
Cohort
S2011<-5154
S2012<-11399
S2013<-7142
S2014<-24648
S2015<-11422
# Recursive Bayes parameter estimates
alpha<-1.25
beta<-15213
# Stationary model to CTC outputs
#alpha<-1.45
#beta<-31221.73
nYears <- 25
nAges<- 5 # ages 1, 2, 3, 4, 5
# Maturation rates
matRate<-c(0, 0, 0.02, 0.93, 1) # ages = 2,3,4,5
# Pre-terminal (PT) and Terminal (T) exploitation rates, by age
PT_ER<-c(0, 0.003, 0.004231, 0.05011, 0.09375)
T_ER<-c(0, 0, 0.1111, 0.138221, 0.141157)
#PT_ER<-c(0, 0, 0.00014594, 0.043478, 0.043478) # ages 2, 3, 4, 5; based on 2016, but with age 5 set equal to age 4
#T_ER<-c(0, 0, 0, 0.183, 0.183) # ages 2, 3, 4, 5; based on 2015 run reconstruction, but with age 5 set equal to age 4
#PT_ER<-c(0, 0, 0, 0, 0)
#T_ER<-c(0, 0, 0, 0, 0)
survRate<-c(0.5, 0.6, 0.7, 0.8, 0.9) # age 1, 2, 3, 4, 5
# State variables
Cohort<-array(dim=c(nYears, nAges))
Cohort_After_PT <- array(dim=c(nYears, nAges))
Cohort_After_Mature <- array(dim=c(nYears, nAges))
Escape<-array(dim=c(nYears, nAges))
TermRun<-array(dim=c(nYears, nAges))
Catch_PT<-array(dim=c(nYears, nAges))
Catch_T<-array(dim=c(nYears, nAges))
popDyn<-function() {
for (y in 1:nYears) {
# Note: Need to think about order of overwinter survival and recruitment; does survival age 1 mean survival from age 1 to age 2????
# Apply overwinter survival and advance age forward a year
if (y > 1) {
for (a in 2:nAges) {
Cohort[y,a] <- Cohort_After_Mature[y-1, a-1] * survRate[a]
}
}
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
if (y==3)  Cohort [y,1]<-Get.Age1.Recruits(S=S2013, a = alpha, b = beta)
if (y==4)  Cohort [y,1]<-Get.Age1.Recruits(S=S2014, a = alpha, b = beta)
if (y==5)  Cohort [y,1]<-Get.Age1.Recruits(S=S2015, a = alpha, b = beta)
if (y > 5)  Cohort[y,1]<-Get.Age1.Recruits(S=sum(Escape[y-1,],na.rm=T), a = alpha, b = beta)
# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort[y,]<- Cohort_After_PT[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort_After_PT[y,] * matRate
# Now remove these from population
Cohort_After_Mature[y,] <- Cohort_After_PT[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
} # end year loop
for (y in 1:nYears) {
# Note: Need to think about order of overwinter survival and recruitment; does survival age 1 mean survival from age 1 to age 2????
# Apply overwinter survival and advance age forward a year
if (y > 1) {
for (a in 2:nAges) {
Cohort[y,a] <- Cohort_After_Mature[y-1, a-1] * survRate[a]
}
}
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
if (y==3)  Cohort [y,1]<-Get.Age1.Recruits(S=S2013, a = alpha, b = beta)
if (y==4)  Cohort [y,1]<-Get.Age1.Recruits(S=S2014, a = alpha, b = beta)
if (y==5)  Cohort [y,1]<-Get.Age1.Recruits(S=S2015, a = alpha, b = beta)
if (y > 5)  Cohort[y,1]<-Get.Age1.Recruits(S=sum(Escape[y-1,],na.rm=T), a = alpha, b = beta)
# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort[y,]<- Cohort_After_PT[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort_After_PT[y,] * matRate
# Now remove these from population
Cohort_After_Mature[y,] <- Cohort_After_PT[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
} # end year loop
Cohort
y
y<-1
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
COhort
Cohort
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
Cohort
y
y<-2
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
Cohort
for (y in 1:nYears) {
# Note: Need to think about order of overwinter survival and recruitment; does survival age 1 mean survival from age 1 to age 2????
# Apply overwinter survival and advance age forward a year
if (y > 1) {
for (a in 2:nAges) {
Cohort[y,a] <- Cohort_After_Mature[y-1, a-1] * survRate[a]
}
}
# Calculate recruitment, with first 5 years initialized at observed escapement levels for 2011-2015
if (y==1)  Cohort [y,1]<-Get.Age1.Recruits(S=S2011, a = alpha, b = beta)
if (y==2)  Cohort [y,1]<-Get.Age1.Recruits(S=S2012, a = alpha, b = beta)
if (y==3)  Cohort [y,1]<-Get.Age1.Recruits(S=S2013, a = alpha, b = beta)
if (y==4)  Cohort [y,1]<-Get.Age1.Recruits(S=S2014, a = alpha, b = beta)
if (y==5)  Cohort [y,1]<-Get.Age1.Recruits(S=S2015, a = alpha, b = beta)
if (y > 5)  Cohort[y,1]<-Get.Age1.Recruits(S=sum(Escape[y-1,],na.rm=T), a = alpha, b = beta)
# Apply preterminal fishing
Catch_PT[y,] <- PT_ER * Cohort[y,]
# Remove PT catch from the population
Cohort_After_PT[y,]<- Cohort[y,] - Catch_PT[y,]
# Apply maturation to calculate terminal run size
TermRun[y,] <-  Cohort_After_PT[y,] * matRate
# Now remove these from population
Cohort_After_Mature[y,] <- Cohort_After_PT[y,]   -  TermRun[y,]
# Apply terminal fishing
Catch_T[y,] <- T_ER * TermRun[y,]
# Calculate Escapement
Escape[y,] <- TermRun[y,] - Catch_T[y,]
} # end year loop
Cohort
matRate
5/8
install.packages("doParallel")
install.packages("foreach")
install.packages("foreach")
debug(utils:::unpackPkgZip)
install.packages("foreach")
library(foreach)
library(parallel)
library(doParallel)
100/(1-0.1)
6*150
install.packages("plotrix")
install.packages("plotrix")
install.packages("plotrix")
library(plotrix)
library(R2jags)
install.packages("R2jags")
install.packages("grDevices")
install.packages("grDevices")
source("functions.R")
library(grDevices)
library(plotrix)
library(R2jags)
library(modeest)
library(gplots)
install.packages("modeest")
install.packages("gplots")
library(grDevices)
library(plotrix)
library(R2jags)
library(modeest)
library(gplots)
install.packages("dplyr")
library(dplyr)
install.packages("tidyr")
1 - pnorm(75, 50, 10)
1 - pnorm(75, 50, 20)
rnorm(20, 50,20)
rnorm(10'0, 50,20)
rnorm(100, 50,20)
xx<-rnorm(100, 50,20)
hist(xx)
x <- 0:200
sum(((x-50)^2)/2*20^2 )
sumexp((((x-50)^2)/2*20^2 ))
sum(exp(-((x-50)^2)/2*20^2 ))
x <- 75:1000
sum(exp(-((x-50)^2)/2*20^2 ))
exp(-((75-50)^2)/2*20^2 )
1 - pnorm(minVuln, mu, sigma)
(75-50)^2)/2*20^2
(75-50)^2)/(2*20^2)
((75-50)^2)/(2*20^2)
?pnorm
1 - pnorm(75, 50, 20)
37.5-18.725
112.5/7.5
init_dir <- "C:/Users/DavisBr/Documents/Fraser_5YrReview/ER_estimation/Original Data Files/1979-2016_RunReconstructionMar 8 2017/Sport Catch1979-16_08Mar2017"
file_data <- "Sport Catch1979-16_08Mar2017.xlsx"
path_dat <- file.path(init_dir, file_data)
file_script <- file.path(init_dir, "saveAllTabsAsCSV.vbs")
# Input checks to make sure the files exist
if (!file.exists(path_dat)) {
stop(paste("Data file,", path_dat, "does not exist."))
}
if (!file.exists(file_script)) {
stop(paste("Script to save worksheets as csv's does not exist",
file_script, "should be stored in RCode folder"))
}
# Must escape the forward slash to get it to work on windows
if (!Sys.info()[1] == "Windows") {
warning("This code is not tested on non-Windows machines")
}
# Fix formatting issues with Windows and R file path names and run the
# visual basic script
system(paste0("cscript \"",
gsub("/", "\\", file_script, fixed = TRUE),
"\" \"",
gsub("/", "\\", path_dat, fixed = TRUE),
"\\"))
init_dir <- "C:/Users/DavisBr/Documents/Fraser_5YrReview/ER_estimation/Original Data Files/1979-2016_RunReconstructionMar 8 2017/Sport Catch1979-16_08Mar2017"
file_data <- "Sport Catch1979-16_08Mar2017.xlsx"
path_dat <- file.path(init_dir, file_data)
file_script <- file.path(init_dir, "saveAllTabsAsCSV.vbs")
# Input checks to make sure the files exist
if (!file.exists(path_dat)) {
stop(paste("Data file,", path_dat, "does not exist."))
}
if (!file.exists(file_script)) {
stop(paste("Script to save worksheets as csv's does not exist",
file_script, "should be stored in RCode folder"))
}
# Must escape the forward slash to get it to work on windows
if (!Sys.info()[1] == "Windows") {
warning("This code is not tested on non-Windows machines")
}
# Fix formatting issues with Windows and R file path names and run the
# visual basic script
system(paste0("cscript \"",
gsub("/", "\\", file_script, fixed = TRUE),
"\" \"",
gsub("/", "\\", path_dat, fixed = TRUE),
"\\"))
# Clear environment
rm(list=ls())
# Read in Repo. Dir. from R base folder
setwd("C:/~")
Dir <- readLines("CN_MSE_Dir.txt")
# navigate to this project's folder
Proj <- "CN_MSE_Simulator"
Case <- "Case_1_ER"
setwd(paste(Dir, Proj, Case, sep="/"))
# Load required packages
library(dplyr)
# Source functions, which are in base folder
FuncPath <- paste(Dir, Proj, "R/Functions.R", sep="/") # main functions for simulation routine
pFuncPath <- paste(Dir, Proj, "R/plottingFunctions.R", sep="/") # functions to make plots
hFuncPath <- paste(Dir, Proj, "R/helperFunctions.R", sep="/") # helper functions that are called from the simulation routine
sFuncPath <- paste(Dir, Proj, "R/setupFunctions.R", sep="/") # functions that help set-up the simulation routine (initialze arrays, read-in data)
statsFuncPath <- paste(Dir, Proj, "R/statsFunctions.R", sep="/") # functions that help set-up the simulation routine (initialze arrays, read-in data)
source(FuncPath)
source(pFuncPath)
source(hFuncPath)
source(sFuncPath)
source(statsFuncPath)
# Create DataOut directory if it doesn't yet exist
outputDir <- "DataOut"
if (file.exists(outputDir) == FALSE){
dir.create(outputDir)
}
# Create Figure directory if it doesn't yet exist
figuresDir <- "Figures"
if (file.exists(figuresDir) == FALSE){
dir.create(figuresDir)
}
Prod<-c("Basic_Ricker", "Recursive_Bayes_5yr")
Fish <- c("Current", "Fish50", "PT_Fish50", "NoFishing")
Names <- NULL
Scenario <- 1
nSims <- 10
Run <- "Sept_26"
i<-j<-1
# Store name for this scenario
Names[Scenario] <- paste(Scenario, Prod[i], Fish[j], Run, sep="_")
# Initialize "blob"
Blob <- Init.Blob(SR = Prod[i], Years = 2011:2065, HRS = Fish[j], nSims = nSims,
Name=Names[Scenario], minVuln=400, BM="Basic_Ricker", Initialization ="Escapement",EV_Type="1",
Prod_Scenario=1, CC_Scenario=1, Smolts_Scenario = 1 , AI_Bias_Scenario = 1, Exclude_Jacks=T)
Blob$ReleaseMort
# Load data to blob
Blob$Data <- Read.Data(Blob)
source(hFuncPath)
source(sFuncPath)
# Load data to blob
Blob$Data <- Read.Data(Blob)
